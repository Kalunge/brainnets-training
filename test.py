# def find_largest(numbers):
#     largest = None
#     for number in numbers:
#         if largest is None or number > largest:
#             largest = number
#     return largest


# numbers = [-1,-2,-3,-4]
# numbers = [-1,-2,-3,-4, 44]
# print(find_largest(numbers))

# def find_duplicates(arr):
#     #return list of duplicates just once in the list

#     result = []
#     for i in range(len(arr)):
#         if arr[i] in arr[i+1:] and arr[i] not in result:
#             result.append(arr[i])
#     return result


# input_arr = [1, 2, 3, 4, 2, 3, 5, 6, 7, 3]
# output = find_duplicates(input_arr)
# print(output)


# def divide(x, y):
#     if x == 0 or y == 0:
#       return None
#     else:
#         return x/y


# result1 = divide(8, 2)
# print(result1)


# def print_data():
#   data = ["item1", "item2", "item3"]
#   for i in range(len(data)):
#     print(data[i])

# print_data()

# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5,
#  we get 3, 5, 6 and 9. The sum of these multiples is 23.

# Find the sum of all the multiples of 3 or 5 below 1000.

# def sum_multiples():
#     sumArray = []
#     for item in range(1, 1000):
#         if item % 3 == 0 or item % 5 == 0:
#             sumArray.append(item)
#     return sum(sumArray)


# print(sum_multiples())

# 2. Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence
#  whose values do not exceed four million, find the sum of the even-valued terms.


# def fibs(end):
#     a = 1
#     b = 2
#     fibs_arr = [1, 2]

#     index = 0
#     sum = 0

#     while b < end:
#         for item in range(1, end):
#             fibs_arr.append(a + b)
#             a = a + 1
#             b = a + b

#     for num in fibs_arr:
#         if num % 2 == 0:
#             sum += num

#     return sum


# print(fibs(4000000))

# The prime factors of 13195 are 5, 7, 13 and 29.

# What is the largest prime factor of the number 600851475143 ?


def is_prime(number):
    factors = []

    # iterate over all numbers from 1 to given number and check if they are divisible, add them to factors list if they are divisible
    for num in range(1, number):
        if number % num == 0:
            factors.append(num)

    if len(factors) > 2:
        return False
    else:
        return True

def largest_prime(num) :
    primes = []
    for item in range(1, num):
        if(is_prime(item) == True):
            primes.append(item)
    
    return max(primes)



print(largest_prime(10))
